syntax = "proto3";

option go_package = "../raftpb;raftpb";

service KVStore {
    // Put a key-value pair
    rpc Put (PutRequest) returns (PutResponse);
    
    // Get a value by key
    rpc Get (GetRequest) returns (GetResponse);
    
    // Update a value by key
    
    // Delete a key-value pair
    rpc Delete (DeleteRequest) returns (DeleteResponse);
    
    // Put multiple key-value pairs (batch operation)
    rpc BatchPut (BatchPutRequest) returns (BatchPutResponse);
    
    // Scan over key-value pairs within a range
    rpc Scan (ScanRequest) returns (ScanResponse);
    
    // Get the current status of the cluster
    rpc Status (StatusRequest) returns (StatusResponse);
    
    // Join the Raft cluster
    rpc Join (JoinRequest) returns (JoinResponse);
}

// PutRequest defines the request structure for Put
message PutRequest {
    bytes key = 1;
    bytes value = 2;
    int32 mode = 3;
}

// PutResponse defines the response structure for Put
message PutResponse {
    bool success = 1;
    bool updated = 2;
    bool added = 3;
    bytes old = 4;
}

// GetRequest defines the request structure for Get
message GetRequest {
    bytes key = 1;
}

// GetResponse defines the response structure for Get
message GetResponse {
    bytes value = 1;
    bool found = 2; // indicates whether the key was found
}

// DeleteRequest defines the request structure for Delete
message DeleteRequest {
    bytes key = 1;
}

// DeleteResponse defines the response structure for Delete
message DeleteResponse {
    bool success = 1;
    string error = 2;
    bytes old = 3;
}

// BatchPutRequest defines the request structure for BatchPut
message BatchPutRequest {
    repeated KeyValue pairs = 1;
}

// BatchPutResponse defines the response structure for BatchPut
message BatchPutResponse {
    bool success = 1;
}

// KeyValue is a single key-value pair
message KeyValue {
    bytes key = 1;
    bytes value = 2;
}

// ScanRequest defines the request structure for Scan
// const (
// 	CMP_GE = +3 // >=
// 	CMP_GT = +2 // >
// 	CMP_LT = -2 // <
// 	CMP_LE = -3 // <=
// )
message Value {
    uint32 type = 1;
    int64 i64 = 2;
    bytes str = 3;
}
// 表达一行记录（包括列名和值）
message Record {
  repeated string cols = 1;
  repeated Value  vals = 2;
}

message ScanRequest {
  bytes keyStart = 1;     // 起始键
  bytes keyEnd = 2;     // 结束键
  int64  cmp1  = 3;    // 比较符号1（>= 或 >）
  int64  cmp2  = 4;    // 比较符号2（<= 或 <）
  
  bytes table = 5;
  int64 index = 6;
}

// ScanResponse defines the response structure for Scan
message ScanResponse {
     repeated Record records = 1;
}

// StatusRequest defines the request structure for Status
message StatusRequest {}
message Node {
    string id = 1;
    string address = 2;
    string grpcaddress = 3;
}
// StatusResponse defines the response structure for Status
message StatusResponse {
    Node me = 1;
    Node leader = 2;
    repeated Node follower = 3; 
}

// JoinRequest defines the request structure for Join
message JoinRequest {
    string node_id = 1;
    string address = 2; // address of the new node to join the cluster
}

// JoinResponse defines the response structure for Join
message JoinResponse {
    bool success = 1;
}
enum OperationType {
    PUT = 0;
    GET = 1;
    DELETE = 3;
    BATCHPUT = 4;
    SCAN = 5;
}
message Operation {
    OperationType type = 1;
    bytes data = 2;
    uint64 term = 3;
    uint64 index = 4;
}

// protoc --go_out=. --go-grpc_out=. kvstore.proto
